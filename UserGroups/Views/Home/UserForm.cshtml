
<link href="~/css/select2styleforcheckbox.css" rel="stylesheet" />
<link href="~/css/internalusergroupformnew.css" rel="stylesheet" />


<div class="card shadow">
    <div class="card-body" style="padding:30px 10px">
    <div class="user_form">
        <h3 class="user_form_h3 mb-0">Interal User Group Form</h3>
        <div class="row">
            <div class="col-lg-3">
                    <input type="text" placeholder="Name" id="nameInput" class="text_box">
            </div>
            <div class="col-lg-9">
              <textarea name="Description" rows="1" id="descriptionInput" class="text_area"
                 placeholder="Description"></textarea>
            </div>
        </div>
        <div class="card center">
            <p class="select_type">Select Type</p>
            <div class="container">
                <div class="row mt-5">
                    <div class="col-lg-6">
                            <input type="radio" name="flexRadioDefault" value="users">
                        <label for="Users">Users</label>
                    </div>
                    <div class="col-lg-6">
                            <input type="radio" name="flexRadioDefault" value="groups">
                        <label for="Groups" >Groups</label>
                    </div>
                    <div class="col-lg-10">
                       <select id="selectDropdown" class="form-select select2 searchbox w-100 mt-3" multiple>
                       </select>
                    </div>
                        <div class="col-lg-2"><button class="btn btn-primary search_btn mt-3" id="saveButton" title="add"> Add <i class="fa-solid fa-plus p-1"></i></button></div>


                </div>
            </div>
        </div>
        <div class="p-2 mt-2 ">
            <div class="row">
                <div class="col-md-6  p-2">
                    <div class="card shadow">
                        <div class="card-header">
                            <h4 class="text-center">Users</h4>
                        </div>
                        <div class="card-body" style="height:400px;">
                            <div id="parentUserTbl" class="">
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-6  p-2">
                    <div class="card shadow">
                        <div class="card-header">
                            <h4 class="text-center">Groups</h4>
                        </div>
                        <div class="card-body" style="height:400px;">
                            <div id="parentGroupTbl" class="">
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        <div class="mt-3 d-flex justify-content-center ">
                <button class="save_btn" onclick="AddInternalUserGroup()">Save</button>
        </div>
    </div>
</div>
</div>
@section Scripts {
    <script>
        var selectedGroups = [];
        var selectedUsers = [];
        $(document).ready(function () {
            $('#saveButton').click(function () {

                debugger;

                var selectedRecords = $('#selectDropdown').val();

                var type = $('input[type=radio][name=flexRadioDefault]:checked').val();
                var selectedRecordsInt = selectedRecords.map(function (record) {
                    return parseInt(record, 10);
                });
                $('#selectDropdown').empty();
                if (type === 'users') {
                    var filteredRecords = selectedRecordsInt.filter(function (record) {
                        return !selectedUsers.includes(record);
                    });

                    // Push filteredRecords into selectedUsers
                    selectedUsers.push.apply(selectedUsers, filteredRecords);
                    populateUserTable(selectedUsers);
                } else if (type === 'groups') {

                    var filteredRecords = selectedRecordsInt.filter(function (record) {
                        return !selectedGroups.includes(record);
                    });

                    // Push filteredRecords into selectedGroupss
                    selectedGroups.push.apply(selectedGroups, filteredRecords);
                    $.ajax({
                        url: '/Home/GetGroupsByIds',
                        type: 'GET',
                        traditional: true,
                        data: { ids: selectedGroups },
                        success: function (response) {
                            debugger;
                            $("#parentGroupTbl").html(response.partialViewHtml);

                            var filteredRecords = response.userIds.filter(function (record) {
                                return !selectedUsers.includes(record);
                            });

                            // Push filteredRecords into selectedGroupss
                            selectedUsers.push.apply(selectedUsers, filteredRecords);
                            populateUserTable(selectedUsers);

                        },
                        error: function (xhr, status, error) {
                            // Handle error here
                            console.error(xhr.responseText);
                        }
                    });
                  //  populateGroupTable(selectedGroups);
                }
              
            });


            var initialLoad = true;

            $('input[type=radio][name=flexRadioDefault]').change(function () {
                var selection = $(this).val();
                var url = '';
                if (selection === 'users') {
                    url = '/Home/GetUsersWithGroups';
                } else if (selection === 'groups') {
                    url = '/Home/GetGroups';
                }
                $('#selectDropdown').val(null);
                $('#selectDropdown').select2({
                    multiple: true,
                    closeOnSelect: false,
                    placeholder: "Search",
                    escapeMarkup: function (markup) {
                        return markup; // Allows HTML content to be rendered
                    },
                    ajax: {
                        url: url,
                        type: 'GET',
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        // processResults: function (data) {
                        //     return {
                        //         results: $.map(data, function (item) {
                        //             return {
                        //                 id: item.id,
                        //                 text: selection === 'groups' ? item.name : item.username +' | ' + item.groups.join(', ')
                        //             }
                        //         })
                        //     };
                        // },
                        processResults: function (data) {
                            return {
                                results: $.map(data, function (item) {
                                    var text;
                                   
                                    if (selection === 'groups') {
                                        text = item.name;
                                    } else {
                                        var Groups = item.groups.join(', ');
                                        text = `<span>${item.username}  </span> <br><p class="paraOfselect">${Groups}</p>`;
                                    }
                                    return {
                                        id: item.id,
                                        text: text
                                    };
                                })
                            };
                        },
                        cache: true
                    },
                    minimumInputLength: 3,
                    language: {
                        inputTooShort: function (args) {
                            var remainingChars = args.minimum - args.input.length;
                            return "Please Enter minimum 3 character ";
                        }
                    }
                            
                });


            
                // Trigger the change event initially to set the correct URL
                if (!initialLoad) {
                    $('#selectDropdown').select2('open');
                }
                initialLoad = false;
            });

            // Trigger the change event initially to set the correct URL
            $('input[type=radio][name=flexRadioDefault]:checked').trigger('change');

        });

        $('#selectDropdown').select2({
            closeOnSelect: false,
            placeholder: "Search",
            // allowHtml: true,
            allowClear: true,
            tags: true // создает новые опции на лету
        });



        function AddInternalUserGroup() {
                var name = $('#nameInput').val();
                var description = $('#descriptionInput').val();
                var type = $('input[type=radio][name=flexRadioDefault]:checked').val();
              
                if (!name) {
                    return alert("Please enter Name!");
                }
                if (!type) {
                    return alert("Please select type!");
                }
                // AJAX POST request to save data
                $.ajax({
                    url: '/Home/SaveInternalGroupData',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ Name: name, Description: description, Type: type, UserIds: selectedUsers }),
                    success: function (response) {
                        // Handle success response
                    toastr.success('Internal Job saved successfully');
                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                    },
                    error: function (xhr, status, error) {
                        // Handle error response
                    toastr.error('Error saving data');
                       
                    }
                });
        }

         
        function populateUserTable(users) {
            $.ajax({
                url: '/Home/GetUsersWithGroupsByIds',
                type: 'GET',
                traditional: true, // Set traditional to true to allow sending arrays in GET requests
                data: { ids: users },
                success: function (response) {
                    $("#parentUserTbl").html(response);
                },
                error: function (xhr, status, error) {
                    // Handle error here
                    console.error(xhr.responseText);
                }
            });
        }

        function populateGroupTable(groups) {
            $.ajax({
                url: '/Home/GetGroupsByIds',
                type: 'GET',
                traditional: true,
                data: { ids: groups },
                success: function (response) {
                    debugger;
                    $("#parentGroupTbl").html(response.partialViewHtml);

                    var filteredRecords = response.userIds.filter(function (record) {
                        return !selectedUsers.includes(record);
                    });

                    // Push filteredRecords into selectedGroupss
                    // selectedUsers.push.apply(selectedUsers, filteredRecords);
                    // populateUserTable(selectedUsers);

                },
                error: function (xhr, status, error) {
                    // Handle error here
                    console.error(xhr.responseText);
                }
            });
        }

       

        function confirmDeleteGroupDialog(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Perform AJAX call or any other action here with the 'id'
                    DeleteGroup(id);
                }
            });
        }

        function confirmDeleteUserDialog(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Perform AJAX call or any other action here with the 'id'
                    DeleteUser(id);
                }
            });
        }


        function DeleteGroup(id) {
            $.ajax({
                url: '/Home/DeleteGroup?id=' + id,
                type: 'GET',
                success: function (users) {
                    var index = selectedGroups.indexOf(id);
                    if (index !== -1) {
                        selectedGroups.splice(index, 1);
                    }

                    users.forEach(function (userId) {
                        var index = selectedUsers.indexOf(userId);
                        if (index !== -1) {
                            selectedUsers.splice(index, 1);
                        }
                    });

                    populateGroupTable(selectedGroups);
                    populateUserTable(selectedUsers);
                    Swal.fire('Deleted!', 'Group has been deleted.', 'success');
                },
                error: function (xhr, status, error) {
                    // Handle error here
                    Swal.fire('Error!', 'There was an error deleting the Group.', 'error');
                }
            });
                    // var index = selectedGroups.indexOf(id);
                    // if (index !== -1) {
                    //     selectedGroups.splice(index, 1);
                    // }

                    // populateGroupTable(selectedGroups);
                    // populateUserTable(selectedUsers);

        }

        function DeleteUser(id) {
            $.ajax({
                url: '/Home/DeleteUser?id=' + id,
                type: 'GET',
                success: function (groups) {
                    var index = selectedUsers.indexOf(id);
                    if (index !== -1) {
                        selectedUsers.splice(index, 1);
                    }
                    groups.forEach(function (groupId) {
                        // Find the corresponding table row by group ID
                        var row = $('#GroupTable').find('tr[data-group-id="' + groupId + '"]');
                        if (row.length > 0) {
                            // Find the "Selected Users" cell in the row and decrement its value
                            var selectedUsersCell = row.find('.selected-users-cell');
                            var selectedUserCount = parseInt(selectedUsersCell.text());
                            if (!isNaN(selectedUserCount) && selectedUserCount > 0) {
                                selectedUsersCell.text(selectedUserCount - 1);
                            }
                            if ((selectedUserCount -1) == 0) {
                                var index = selectedGroups.indexOf(groupId);
                                if (index !== -1) {
                                    selectedGroups.splice(index, 1);
                                }
                                row.remove();
                            }
                        }
                    });
                    populateUserTable(selectedUsers);
                    Swal.fire('Deleted!', 'User has been deleted.', 'success');
                },
                error: function (xhr, status, error) {
                    // Handle error here
                    Swal.fire('Error!', 'There was an error deleting the User.', 'error');
                }
            });

            // var index = selectedUsers.indexOf(id);
            // if (index !== -1) {
            //     selectedUsers.splice(index, 1);
            // }
            // populateUserTable(selectedUsers);
            // populateGroupTable(selectedGroups);
        }

   
    </script>
}